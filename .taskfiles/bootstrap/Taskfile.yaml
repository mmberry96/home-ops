---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BOOTSTRAP_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/bootstrap/resources'
  TALHELPER_CONFIG_FILE: '{{.CLUSTER_DIR}}/talos/talconfig.yaml'
  TALHELPER_CLUSTER_DIR: '{{.CLUSTER_DIR}}/talos/clusterconfig'

tasks:
  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    cmds:
      - until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
      - talosctl --context {{.CLUSTER}} kubeconfig --nodes {{.TALOS_CONTROLLER}} --merge --force --force-context-name {{.CLUSTER}} {{.ROOT_DIR}}
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.ROOT_DIR}}/talosconfig
      - which talhelper talosctl

  # NOTE: Nodes must all be part of the Ceph cluster and Ceph disks must share the same disk model
  rook:
    desc: Bootstrap Rook-Ceph [CLUSTER=main] [MODEL=required]
    cmds:
      - minijinja-cli {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook.yaml.j2 | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - until kubectl --context {{.CLUSTER}} --namespace default get job/wipe-rook &>/dev/null; do sleep 5; done
      - kubectl --context {{.CLUSTER}} --namespace default wait job/wipe-rook --for=condition=complete --timeout=5m
      - stern --context {{.CLUSTER}} --namespace default job/wipe-rook --no-follow
      - kubectl --context {{.CLUSTER}} --namespace default delete job wipe-rook
    env:
      MODEL: '{{.MODEL}}'
      NODE_COUNT:
        sh: talosctl --context {{.CLUSTER}} config info --output json | jq --raw-output '.nodes | length'
    requires:
      vars: [CLUSTER, MODEL]
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook.yaml.j2
      - which kubectl minijinja-cli stern talosctl jq

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    cmds:
      - until kubectl --context {{.CLUSTER}} wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - helmfile --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.CLUSTER}} wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl --context {{.CLUSTER}} config info
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - which helmfile kubectl talosctl

  flux:
    desc: Bootstrap Flux [CLUSTER=main]
    cmds:
      - kubectl --context {{.CLUSTER}} apply --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/apps
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl --context {{.CLUSTER}} apply --server-side --filename -
      - kubectl --context {{.CLUSTER}} apply --server-side --kustomize {{.CLUSTER_DIR}}/flux/config
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}{{.CLUSTER}}{{end}}'
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSl https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
    requires:
      vars: [CLUSTER]
    preconditions:
      - op user get --me
      - which curl flux kubectl ls op jq

  recreate-secrets:
    desc: Recreate bootstrap secrets [CLUSTER=main]
    cmds:
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl --context {{.CLUSTER}} apply --server-side --filename -
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}{{.CLUSTER}}{{end}}'
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSl https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
    requires:
      vars: [CLUSTER]
    preconditions:
      - op user get --me
      - which curl flux kubectl ls op jq
